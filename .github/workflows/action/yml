name: NuGet Reusable Workflow

on:
  workflow_call:
    inputs:
      command:
        required: true
        type: string
        description: "Command to run: restore | pack | push"
      restoreSolution:
        required: false
        type: string
        default: ""
      feedsToUse:
        required: false
        type: string
        default: ""
      vstsFeed:
        required: false
        type: string
        default: ""
      includeNuGetOrg:
        required: false
        type: string
        default: "true"
      nugetConfigPath:
        required: false
        type: string
        default: ""
      externalFeedCredentials:
        required: false
        type: string
        default: ""
      noCache:
        required: false
        type: boolean
        default: false
      disableParallelProcessing:
        required: false
        type: boolean
        default: false
      restoreDirectory:
        required: false
        type: string
        default: ""
      verbosityRestore:
        required: false
        type: string
        default: "Detailed"
      packagesToPush:
        required: false
        type: string
        default: ""
      nuGetFeedType:
        required: false
        type: string
        default: "internal"
      publishVstsFeed:
        required: false
        type: string
        default: ""
      allowPackageConflicts:
        required: false
        type: boolean
        default: false
      publishFeedCredentials:
        required: false
        type: string
        default: ""
      packagesToPack:
        required: false
        type: string
        default: "**/*.csproj"
      configuration:
        required: false
        type: string
        default: "Release"
      packDestination:
        required: false
        type: string
        default: ""
      arguments:
        required: false
        type: string
        default: ""
      publishPackageMetadata:
        required: false
        type: boolean
        default: true
      verbosityPush:
        required: false
        type: string
        default: "Detailed"
      versioningScheme:
        required: false
        type: string
        default: "off"
      includeReferencedProjects:
        required: false
        type: boolean
        default: false
      versionEnvVar:
        required: false
        type: string
        default: ""
      majorVersion:
        required: false
        type: number
        default: 1
      minorVersion:
        required: false
        type: number
        default: 0
      patchVersion:
        required: false
        type: number
        default: 0
      packTimezone:
        required: false
        type: string
        default: "utc"
      includeSymbols:
        required: false
        type: boolean
        default: false
      toolPackage:
        required: false
        type: boolean
        default: false
      buildProperties:
        required: false
        type: string
        default: ""
      basePath:
        required: false
        type: string
        default: ""
      verbosityPack:
        required: false
        type: string
        default: "Detailed"
      verbosity:
        required: false
        type: string
        default: "detailed"
      nuGetRestoreArgs:
        required: false
        type: string
        default: ""
      nuGetVersion:
        required: false
        type: string
        default: "5.9.0"
      nuGetPath:
        required: false
        type: string
        default: "./nuget.exe"
      searchPattern:
        required: false
        type: string
        default: "*.csproj"
      outputdir:
        required: false
        type: string
        default: ""
      versionByBuild:
        required: false
        type: boolean
        default: false
      packTimezoneDescription:
        required: false
        type: string
        default: ""
      skipDuplicate:
        required: false
        type: boolean
        default: false
    secrets:
      publishFeedApiKey:
        required: false
      apiKey:
        required: false

jobs:
  nuget:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Validate nuget.config Path (if provided)
        if: ${{ inputs.nugetConfigPath != '' }}
        run: |
          if (!(Test-Path "${{ inputs.nugetConfigPath }}")) {
            Write-Error "nuget.config file not found at path: ${{ inputs.nugetConfigPath }}"
            exit 1
          }

      - name: Ensure nuget.exe present
        run: |
          $nugetPath = "${{ inputs.nuGetPath }}"
          if (-not $nugetPath) { $nugetPath = "./nuget.exe" }
          if (!(Test-Path $nugetPath)) {
            Invoke-WebRequest -Uri "https://dist.nuget.org/win-x86-commandline/v${{ inputs.nuGetVersion }}/nuget.exe" -OutFile $nugetPath
          }
        shell: powershell

      - name: Restore NuGet Packages
        if: ${{ inputs.command == 'restore' }}
        run: |
          $nuget = "${{ inputs.nuGetPath }}"
          if (-not (Test-Path $nuget)) { $nuget = "./nuget.exe" }
          $cmd = "$nuget restore `"$(${{ inputs.restoreSolution }})`" 
          if (${{ inputs.nugetConfigPath }} -ne "") { $cmd += " -ConfigFile `"$(${{ inputs.nugetConfigPath }})`"" }
          if (${{ inputs.packagesDirectory }} -ne "") { $cmd += " -PackagesDirectory `"$(${{ inputs.packagesDirectory }})`"" }
          if ("${{ inputs.verbosityRestore }}" -ne "") { $cmd += " -Verbosity $${{ inputs.verbosityRestore }}" }
          if (${{ inputs.noCache }}) { $cmd += " -NoCache" }
          if (${{ inputs.disableParallelProcessing }}) { $cmd += " -DisableParallelProcessing" }
          if (${{ inputs.nuGetRestoreArgs }} -ne "") { $cmd += " $${{ inputs.nuGetRestoreArgs }}" }
          Write-Host "Running: $cmd"
          iex $cmd
        shell: powershell

      - name: Pack Projects
        if: ${{ inputs.command == 'pack' }}
        run: |
          $isTool = ${{ inputs.toolPackage }}
          $projPattern = "${{ inputs.packagesToPack }}"
          $outDir = "${{ inputs.packDestination }}"
          $config = "${{ inputs.configuration }}"
          $props = "${{ inputs.buildProperties }}"
          $includeSymbols = ${{ inputs.includeSymbols }}
          if ($isTool -eq $true) {
            Write-Host "Using dotnet pack for tool packaging"
            dotnet pack $projPattern -c $config -o $outDir $props
          } else {
            # prefer dotnet pack for csproj packs
            Write-Host "Using dotnet pack"
            $packArgs = "pack $projPattern -c $config -o $outDir"
            if ($props -ne "") { $packArgs += " -p:$props" }
            if ($includeSymbols -eq $true) { $packArgs += " --include-symbols" }
            if ("${{ inputs.verbosityPack }}" -ne "") { $packArgs += " -v $${{ inputs.verbosityPack }}" }
            if ("${{ inputs.arguments }}" -ne "") { $packArgs += " $${{ inputs.arguments }}" }
            Write-Host "Running: dotnet $packArgs"
            dotnet $packArgs
          }
        shell: bash

      - name: Push Packages
        if: ${{ inputs.command == 'push' }}
        run: |
          $packages = "${{ inputs.packagesToPush }}"
          if (-not $packages -or $packages -eq "") {
            Write-Error "packagesToPush is required for push"
            exit 1
          }
          $source = "${{ inputs.publishFeedCredentials }}"
          $apiKeySecret = "${{ secrets.publishFeedApiKey }}"
          if ($source -eq "") {
            Write-Host "No explicit feed endpoint provided. Using default feed settings."
          }
          # Use dotnet nuget push (works for both nuget.org and other v3 endpoints)
          $pushCmd = "dotnet nuget push `"$packages`" -s `"$source`""
          if ($apiKeySecret -ne "") {
            $pushCmd += " -k `"$apiKeySecret`""
          } else {
            Write-Host "Warning: No publishFeedApiKey secret provided. Push may fail if authentication required."
          }
          if ("${{ inputs.verbosityPush }}" -ne "") { $pushCmd += " -v $${{ inputs.verbosityPush }}" }
          if (${{ inputs.skipDuplicate }}) { $pushCmd += " --skip-duplicate" }
          Write-Host "Running: $pushCmd"
          iex $pushCmd
        shell: powershell
