# yaml
name: Reusable NuGet (simple)
on:
  workflow_call:
    inputs:
      command:
        type: string
        default: 'restore'
      restoreSolution:
        type: string
        default: '**/*.sln'
      packagesToPush:
        type: string
        default: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
      nuGetFeedType:
        type: string
        default: 'internal'
      publishVstsFeed:
        type: string
        default: ''
      allowPackageConflicts:
        type: string
        default: 'false'
      publishFeedCredentials:
        type: string
        default: ''
      packagesToPack:
        type: string
        default: '**/*.csproj'
      configuration:
        type: string
        default: '$(BuildConfiguration)'
      packDestination:
        type: string
        default: '$(Build.ArtifactStagingDirectory)'
      arguments:
        type: string
        default: ''
      feedsToUse:
        type: string
        default: 'select'
      vstsFeed:
        type: string
        default: ''
      includeNuGetOrg:
        type: string
        default: 'true'
      nugetConfigPath:
        type: string
        default: ''
      externalFeedCredentials:
        type: string
        default: ''
      noCache:
        type: string
        default: 'false'
      disableParallelProcessing:
        type: string
        default: 'false'
      restoreDirectory:
        type: string
        default: ''
      verbosityRestore:
        type: string
        default: 'Detailed'
      publishPackageMetadata:
        type: string
        default: 'true'
      verbosityPush:
        type: string
        default: 'Detailed'
      versioningScheme:
        type: string
        default: 'off'
      includeReferencedProjects:
        type: string
        default: 'false'
      versionEnvVar:
        type: string
        default: ''
      majorVersion:
        type: string
        default: '1'
      minorVersion:
        type: string
        default: '0'
      patchVersion:
        type: string
        default: '0'
      packTimezone:
        type: string
        default: 'utc'
      includeSymbols:
        type: string
        default: 'false'
      toolPackage:
        type: string
        default: 'false'
      buildProperties:
        type: string
        default: ''
      basePath:
        type: string
        default: ''
      verbosityPack:
        type: string
        default: 'Detailed'

jobs:
  run-nuget:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download nuget.exe
        run: |
          Invoke-WebRequest -Uri "https://dist.nuget.org/win-x86-commandline/latest/nuget.exe" -OutFile nuget.exe
        shell: pwsh

      - name: Run simple nuget command
        id: execute
        run: |
          $cmd = ""
          $cmdType = "${{ inputs.command }}" .ToLower()

          if ($cmdType -eq "restore") {
            $cmd = ".\nuget.exe restore `"$(${{ inputs.restoreSolution }})`""
            if ("${{ inputs.nugetConfigPath }}" -ne "") { $cmd += " -ConfigFile `"$(${{ inputs.nugetConfigPath }})`"" }
            if ("${{ inputs.restoreDirectory }}" -ne "") { $cmd += " -PackagesDirectory `"$(${{ inputs.restoreDirectory }})`"" }
            if ("${{ inputs.noCache }}" -eq "true") { $cmd += " -NoCache" }
            if ("${{ inputs.disableParallelProcessing }}" -eq "true") { $cmd += " -DisableParallelProcessing" }
            if ("${{ inputs.verbosityRestore }}" -ne "") { $cmd += " -Verbosity $(${{ inputs.verbosityRestore }})" }
          }
          elseif ($cmdType -eq "pack") {
            $cmd = ".\nuget.exe pack `"$(${{ inputs.packagesToPack }})`""
            if ("${{ inputs.basePath }}" -ne "") { $cmd += " -BasePath `"$(${{ inputs.basePath }})`"" }
            if ("${{ inputs.packDestination }}" -ne "") { $cmd += " -OutputDirectory `"$(${{ inputs.packDestination }})`"" }
            if ("${{ inputs.includeSymbols }}" -eq "true") { $cmd += " -Symbols" }
            if ("${{ inputs.toolPackage }}" -eq "true") { $cmd += " -Tool" }
            if ("${{ inputs.buildProperties }}" -ne "") { $cmd += " -Properties `"$(${{ inputs.buildProperties }})`"" }
            if ("${{ inputs.verbosityPack }}" -ne "") { $cmd += " -Verbosity $(${{ inputs.verbosityPack }})" }

            if ("${{ inputs.versioningScheme }}" -eq "byPrereleaseNumber") {
              $ver = "${{ inputs.majorVersion }}.${{ inputs.minorVersion }}.${{ inputs.patchVersion }}-ci"
              $cmd += " -Version $ver"
            } elseif ("${{ inputs.versioningScheme }}" -eq "byEnvVar") {
              if ("${{ inputs.versionEnvVar }}" -ne "") {
                $envVer = $env:"${{ inputs.versionEnvVar }}"
                if ($envVer) { $cmd += " -Version $envVer" }
              }
            } elseif ("${{ inputs.versioningScheme }}" -eq "byBuildNumber") {
              if ($env:GITHUB_RUN_NUMBER) { $cmd += " -Version $($env:GITHUB_RUN_NUMBER)" }
            }
          }
          elseif ($cmdType -eq "push") {
            $raw = "${{ inputs.packagesToPush }}"
            $packages = $raw -split ";"
            $source = ""
            if ("${{ inputs.nuGetFeedType }}" -eq "internal" -and "${{ inputs.publishVstsFeed }}" -ne "") {
              $source = "${{ inputs.publishVstsFeed }}"
            } elseif ("${{ inputs.nuGetFeedType }}" -eq "external" -and "${{ inputs.publishFeedCredentials }}" -ne "") {
              $source = "${{ inputs.publishFeedCredentials }}"
            } elseif ("${{ inputs.includeNuGetOrg }}" -eq "true") {
              $source = "https://api.nuget.org/v3/index.json"
            }

            foreach ($p in $packages) {
              $pTrim = $p.Trim()
              if ($pTrim -eq "") { continue }
              $pushCmd = ".\nuget.exe push `"$pTrim`""
              if ($source -ne "") { $pushCmd += " -Source `"$source`"" }
              if ($env:NUGET_API_KEY) { $pushCmd += " -ApiKey `"$env:NUGET_API_KEY`"" } else { Write-Host "No NUGET_API_KEY set; ensure feed auth is configured" }
              if ("${{ inputs.allowPackageConflicts }}" -eq "true") { $pushCmd += " -SkipDuplicate" }
              if ("${{ inputs.verbosityPush }}" -ne "") { $pushCmd += " -Verbosity $(${{ inputs.verbosityPush }})" }
              Write-Host "Executing: $pushCmd"
              Invoke-Expression $pushCmd
            }

            # mark as done; avoid running final $cmd below
            $cmd = ""
          }
          elseif ($cmdType -eq "custom") {
            if ("${{ inputs.arguments }}" -eq "") { throw "Custom command requested but no arguments provided." }
            $cmd = ".\nuget.exe $(${{ inputs.arguments }})"
          }
          else {
            throw "Unsupported command: $cmdType"
          }

          if ($cmd -ne "") {
            Write-Host "Executing: $cmd"
            Invoke-Expression $cmd
          }

          echo "::set-output name=ran::$cmd"
        shell: pwsh
